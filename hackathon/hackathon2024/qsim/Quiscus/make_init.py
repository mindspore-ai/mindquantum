#!/usr/bin/env python3
# Author: Armit
# Create Time: 2024/06/05 

# 在已知样例上寻找给定 ansatz 的最优参数 (全局优化)，作为之后未知样例的初始 init
# NOTE: scipy==1.7.3, the version is fixed since we're using the "mindspore-cpu:2.2.14" docker image
# - brute cannot run due to resource limit; shgo is fucking slow to wait
# - goodness: basinhopping > differential_evolution > dual_annealing

from scipy.optimize import basinhopping, brute, differential_evolution, shgo, dual_annealing
#from scipy.optimize import direct

from solution import *

molecule = [
  ['H', [0, 0, 0.0]],
  ['H', [0, 0, 1.0]],
  ['H', [0, 0, 2.0]],
  ['H', [0, 0, 3.0]],
]
mol = generate_molecule(molecule)
ops = get_molecular_hamiltonian(mol)
ham = Hamiltonian(ops)
circ = get_hae_ry_circit(mol, depth=3)
sim = Simulator('mqvector', circ.n_qubits)


def func(x:ndarray):
  global sim
  pr = dict(zip(circ.params_name, x))
  return sim.get_expectation(ham, circ, pr=pr).real

p0 = np.zeros(len(circ.params_name))
bnds = [(-2*np.pi, 2*np.pi) for _ in range(len(p0))]


'''
[HAE(1)]
  fval: -2.122499866603306
  x: [ 4.15165887e-07  1.06564745e-06 -3.45492588e-01  2.26707721e-06
 -4.49372498e-06  5.21568045e-06  1.57079758e+00 -1.57079633e+00
  4.07985022e-07 -5.44249712e-06  4.17924428e-06  2.23746358e-06
  5.53155044e-08 -6.88635174e-06  1.57079911e+00  1.57080034e+00]
[HAE(2)]
  fval: -2.1237223625293686
  x: [-4.17479290e-02  4.19428027e-02 -3.19262286e-06 -6.48419701e-06
  2.03393392e-06 -6.20077942e-06 -3.21959966e-07 -2.35902837e+00
  8.89038509e-04  7.60052736e-06 -3.41600906e-01 -3.37595744e-07
  1.23827578e-03 -6.86956685e-06  1.57081488e+00  7.88162842e-01
 -5.20413629e-06  2.01586345e-05 -6.14391919e-06 -2.76539601e-05
  2.32753541e-05  6.07099295e-06  1.57081482e+00  1.57080232e+00]
[HAE(3)]
  fval: -2.1381799552395426
  x: [ 1.22370107e-01 -1.66054762e-01  3.20737735e-07  8.44218297e-07
 -1.98559036e-05  1.78010196e-06 -1.57079747e+00  1.57079446e+00
  4.92694484e-02 -1.43155201e-06  7.46814580e-07 -3.18785166e-07
 -1.18457783e-06  1.75571258e-06  1.57082668e+00  3.68290902e-05
 -1.48648531e-07  4.81387841e-07 -3.36380958e-01  3.61819988e-06
 -2.01957541e-05 -4.48937945e-06  1.57076948e+00 -3.81738265e-05
 -4.90587562e-06  6.66226393e-07  6.21066650e-08 -1.25821329e-07
  2.10724997e-06  3.51003981e-06 -1.57079885e+00 -1.57079391e+00]
'''
if not 'basinhopping':
  print('[basinhopping]')
  res = basinhopping(func, p0, niter=300)
  print('  fval:', res.fun)
  print('  x:', res.x)


'''
[HAE(1)]
  fval: -2.1224998664564327
  x: [ 3.64974527e-06 -3.14159526e+00  2.79608647e+00 -3.30967917e-06
 -6.28318531e+00 -6.28318531e+00  4.71239294e+00  4.71238725e+00
  7.88769730e-06  3.14159923e+00 -1.37959660e-05  6.28315783e+00
  7.71115310e-06  6.28318531e+00  4.71239528e+00  1.57079214e+00]
[HAE(2)]
  fval: -2.1271745458439644
  x: [ 3.27429909e+00  1.97525220e+00  4.71234911e+00  6.28278891e+00
 -3.14235260e+00 -1.57103970e+00 -4.71238170e+00  1.57089583e+00
  6.04068286e+00 -5.11365399e+00 -4.71240580e+00 -4.39847401e+00
 -4.71248348e+00 -1.57091276e+00 -3.14183779e+00  3.14157536e+00
  3.19368601e+00 -3.14163357e+00  4.71282328e+00  1.57002140e+00
 -2.55166489e-04 -3.14172131e+00 -1.57052825e+00  1.57070466e+00]
[HAE(3)]
  fval: -2.1053657294548422
  x: [-5.46638765e+00  1.49353494e+00  4.62822104e+00 -1.59536972e+00
  6.28318531e+00 -1.99186380e-01 -4.71238868e+00  1.57073007e+00
  2.32646632e+00 -1.62394041e+00 -1.57524752e+00 -1.57051762e+00
  3.14165416e+00  1.58222486e+00 -3.14230582e+00 -3.14159030e+00
 -5.63093365e-02 -3.19582058e+00 -3.11699502e+00 -3.13039772e+00
  6.08406311e+00  4.71239725e+00  1.57117910e+00 -6.28305432e+00
  3.14160387e+00 -1.18623658e-05 -3.14148864e+00 -1.57075760e+00
 -1.57329148e+00 -5.84218921e-04 -3.14120663e+00  1.57093127e+00]
'''
if not 'dual_annealing':
  print('[dual_annealing]')
  res = dual_annealing(func, bnds, maxiter=300)
  print('  fval:', res.fun)
  print('  x:', res.x)


'''
[HAE(1)]
  fval: -2.0985459365918926
  x: [ 6.28318531e+00  6.28317450e+00 -1.22046255e+00 -4.71238991e+00
 -1.57078119e+00  4.71238472e+00  4.71238541e+00 -1.57079043e+00
 -1.64377134e-05 -3.47385008e-05  1.22045936e+00  1.57076381e+00
 -1.57083565e+00 -1.57078912e+00 -1.57079421e+00  1.57079776e+00]
[HAE(2)]
  fval: -2.127174556316378
  x: [-2.90063874e+00  1.37203310e+00  4.71246334e+00  3.14172774e+00
  6.28312826e+00  4.71245198e+00 -4.71239271e+00  1.57079846e+00
  3.02562779e+00 -1.37763424e+00  1.57079709e+00 -4.39847100e+00
  1.57084277e+00  1.57077854e+00  3.14162513e+00 -7.93884185e-06
  4.71309038e-02  3.14152251e+00 -4.71253864e+00 -1.57087442e+00
 -8.67529353e-05 -6.28317019e+00 -4.71242703e+00 -1.57080053e+00]
[HAE(3)]
  fval: -2.122938968838739
  x: [-5.67152587e+00 -4.70714237e+00  2.96801388e+00 -1.51846490e+00
  3.14307034e+00  5.06358420e+00 -4.71238818e+00 -1.56245047e+00
 -3.75290719e+00  1.54209327e+00  4.68490478e+00  2.65887544e-02
 -2.83785595e-02  1.41941755e+00 -2.60171619e-05  2.47603620e-06
  1.18381270e-01 -6.11159633e+00 -1.57222392e+00 -8.65239803e-05
  1.58045090e+00 -4.86349449e+00 -3.14158322e+00 -7.75910211e-03
 -3.26312195e+00 -1.57287400e+00  4.71235851e+00  4.71240827e+00
 -1.57032300e+00 -4.71233167e+00 -1.57079660e+00  1.57079703e+00]
'''
if not 'differential_evolution':
  print('[differential_evolution]')
  res = differential_evolution(func, bnds, strategy='best1bin', maxiter=300)
  print('  fval:', res.fun)
  print('  x:', res.x)


'''
[HAE(2)]
  fval: -2.12717455699201
  x: [-7.50192089e-02 -5.39213019e-02 -1.57079946e+00  2.57029659e-05
  4.03054967e-06  1.57079719e+00 -1.57079635e+00  1.57079295e+00
  1.16371583e-01 -5.40732159e-02  1.57079701e+00  1.25688645e+00
  1.57078841e+00  1.57080158e+00  6.29802784e-06 -3.14159249e+00
 -7.49089803e-02  1.26923149e-06 -1.57076860e+00 -1.57080120e+00
 -1.31342775e-07  2.79170030e-06 -1.57079048e+00  1.57079944e+00]
[HAE(3)]
  fval: -2.1381799552395426
  x: [ 1.22371875e-01  1.66050064e-01 -1.08207624e-07  4.15497272e-06
  2.97311960e-05 -3.63897419e-06 -1.57081472e+00  1.57079755e+00
  -4.92704293e-02 -1.38435013e-07 -6.27820153e-07  1.38740712e-07
  9.15675847e-07 -3.72413430e-06  1.57079385e+00 -1.50730271e-05
  -5.40910224e-07  2.70715532e-07 -3.36369100e-01 -6.03572356e-07
  2.97790996e-05  1.08889993e-05  1.57081228e+00  1.50873326e-05
  5.32951353e-06  3.89451753e-06 -1.39213793e-06 -3.12104716e-06
  -1.22848655e-06 -5.85945213e-06 -1.57079092e+00 -1.57079792e+00]
'''
best_fval = -2.1381799552395426
if 'basinhopping rand init':
  print('[basinhopping rand init]')
  for _ in range(100):
    p0 = np.random.normal(0, 0.2, size=p0.shape)
    res = basinhopping(func, p0, niter=300)
    if res.fun < best_fval:
      best_fval = res.fun
      print('  fval:', res.fun)
      print('  x:', res.x)
