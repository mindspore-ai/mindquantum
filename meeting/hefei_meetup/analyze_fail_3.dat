# [No.1] construct_wrapper.133
# In file /tmp/ipykernel_342/3434350699.py(92)/
funcgraph fg_133(
        %para1 : Tensor(F64)[1, 4]    # x
        , %para2 : Ref[Tensor(F32)][4]    # fc3.bias
        , %para3 : Ref[Tensor(F32)][4, 32]    # fc3.weight
        , %para4 : Ref[Tensor(F32)][32]    # fc2.bias
        , %para5 : Ref[Tensor(F32)][32, 32]    # fc2.weight
        , %para6 : Ref[Tensor(F32)][32]    # fc1.bias
        , %para7 : Ref[Tensor(F32)][32, 4]    # fc1.weight
    ) {

#------------------------> 0
    %1 = FuncGraph::fg_134(%para1)    #(Tensor(F64)[1, 4])    # fg_134=construct.134 #scope: Default
      # In file /tmp/ipykernel_342/3434350699.py(96)/#[CNode]140
    Primitive::Return{prim_type=1}(%1)    #(Undefined) #scope: Default
      # In file /tmp/ipykernel_342/3434350699.py(96)/#[CNode]141
}
# order:
#   1: construct_wrapper.133:[CNode]140{[0]: ValueNode<FuncGraph> construct.134, [1]: x}
#   2: construct_wrapper.133:[CNode]141{[0]: ValueNode<Primitive> Return, [1]: [CNode]140}


# [No.2] construct.134
# In file /tmp/ipykernel_342/3434350699.py(92)/
funcgraph fg_134[fg_133](
        %para8 : Tensor(F64)[1, 4]    # x
    ) {

#------------------------> 1
    %1 = FuncGraph::fg_135(%para8)    #(Tensor(F64)[1, 4])    # fg_135=construct.135 #scope: Default
      # In file /tmp/ipykernel_342/3434350699.py(93)/#x
    %2 = FuncGraph::fg_142(%1)    #(Undefined)    # fg_142=construct.142 #scope: Default
      # In file /tmp/ipykernel_342/3434350699.py(94)/#x
    %3 = FuncGraph::fg_143(%2)    #(Undefined)    # fg_143=construct.143 #scope: Default
      # In file /tmp/ipykernel_342/3434350699.py(95)/#q_values
    Primitive::Return{prim_type=1}(%3)    #(Undefined) #scope: Default
      # In file /tmp/ipykernel_342/3434350699.py(96)/#[CNode]144
}
# order:
#   1: construct.134:x{[0]: ValueNode<FuncGraph> construct.135, [1]: x}
#   2: construct.134:x{[0]: ValueNode<FuncGraph> construct.142, [1]: x}
#   3: construct.134:q_values{[0]: ValueNode<FuncGraph> construct.143, [1]: x}
#   4: construct.134:[CNode]144{[0]: ValueNode<Primitive> Return, [1]: q_values}


# [No.3] construct.135
# In file /usr/local/lib/python3.7/dist-packages/mindspore/nn/layer/basic.py(312)/    def construct(self, x):/
funcgraph fg_135[fg_133](
        %para9 : Tensor(F64)[1, 4]    # x
    ) {

#------------------------> 2
    %1 = FuncGraph::fg_136(%para9, %para6, %para7)    #(Tensor(F64)[1, 4], Ref[Tensor(F32)][32], Ref[Tensor(F32)][32, 4])    # fg_136=L-construct.136 #scope: Default
      # #[CNode]145
    Primitive::Return{prim_type=1}(%1)    #(Undefined) #scope: Default/fc1-Dense
      # In file /usr/local/lib/python3.7/dist-packages/mindspore/nn/layer/basic.py(312)/    def construct(self, x):/#[CNode]146
}
# order:
#   1: construct.135:[CNode]145{[0]: ValueNode<FuncGraph> L-construct.136, [1]: x, [2]: fc1.bias, [3]: fc1.weight}
#   2: construct.135:[CNode]146{[0]: ValueNode<Primitive> Return, [1]: [CNode]145}


# [No.4] L-construct.136
# In file /usr/local/lib/python3.7/dist-packages/mindspore/nn/layer/basic.py(312)/    def construct(self, x):/
funcgraph fg_136(
        %para10 : Tensor(F64)[1, 4]    # x
        , %para11 : Ref[Tensor(F32)][32]    # L-fc3.bias
        , %para12 : Ref[Tensor(F32)][32, 4]    # L-fc3.weight
    ) {
    %1 : Tuple[I64*2] = DoSignaturePrimitive::S-Prim-Shape{prim_type=1}(%para10)    #(Tensor(F64)[1, 4]) #scope: Default/fc3-Dense
      # In file /usr/local/lib/python3.7/dist-packages/mindspore/nn/layer/basic.py(322)/        if len(x_shape) != 2:/#Φx_shape
    %2 : NoneType = DoSignaturePrimitive::S-Prim-check_dense_input_shape{prim_type=1}(%1)    #(Tuple[I64*2]) #scope: Default/fc3-Dense
      # In file /usr/local/lib/python3.7/dist-packages/mindspore/nn/layer/basic.py(314)/        check_dense_input_shape(x_shape)/#147
    %3 : NoneType = Primitive::stop_gradient{prim_type=1}(%2)    #(NoneType) #scope: Default/fc3-Dense
      # In file /usr/local/lib/python3.7/dist-packages/mindspore/nn/layer/basic.py(312)/    def construct(self, x):/#148
    %4 : I64 = FuncGraph::fg_149(%1)    #(Tuple[I64*2])    # fg_149=L-ms_len.149 #scope: Default/fc3-Dense
      # In file /usr/local/lib/python3.7/dist-packages/mindspore/nn/layer/basic.py(315)/        if len(x_shape) != 2:/#150
    %5 : Bool = DoSignaturePrimitive::S-Prim-not_equal{prim_type=1}(%4, I64(2))    #(I64, I64) #scope: Default/fc3-Dense
      # In file /usr/local/lib/python3.7/dist-packages/mindspore/nn/layer/basic.py(315)/        if len(x_shape) != 2:/#151
    %6 : Bool = FuncGraph::fg_152(%5)    #(Bool)    # fg_152=L-bool_.152 #scope: Default/fc3-Dense
      # In file /usr/local/lib/python3.7/dist-packages/mindspore/nn/layer/basic.py(315)/        if len(x_shape) != 2:/#151
    %7 : Func = Primitive::Switch{prim_type=1}(%6, FuncGraph::fg_153, FuncGraph::fg_137)    #(Bool, Func, Func)    # fg_153=L-✓construct.153, fg_137=L-✗construct.137 #scope: Default/fc3-Dense
      # In file /usr/local/lib/python3.7/dist-packages/mindspore/nn/layer/basic.py(315)/        if len(x_shape) != 2:/#154

#------------------------> 3
    %8 = %7() #scope: Default/fc3-Dense
      # In file /usr/local/lib/python3.7/dist-packages/mindspore/nn/layer/basic.py(315)/        if len(x_shape) != 2:/#155
    %9 = Primitive::Depend{prim_type=1}[side_effect_propagate=I64(1)](%8, %3)    #(Undefined, NoneType) #scope: Default/fc3-Dense
      # In file /usr/local/lib/python3.7/dist-packages/mindspore/nn/layer/basic.py(312)/    def construct(self, x):/#156
    Primitive::Return{prim_type=1}(%9)    #(Undefined) #scope: Default/fc3-Dense
      # In file /usr/local/lib/python3.7/dist-packages/mindspore/nn/layer/basic.py(312)/    def construct(self, x):/#[CNode]157
}
# order:
#   1: L-construct.136:Φx_shape{[0]: ValueNode<DoSignaturePrimitive> S-Prim-Shape, [1]: x}
#   2: L-construct.136:147{[0]: ValueNode<DoSignaturePrimitive> S-Prim-check_dense_input_shape, [1]: Φx_shape}
#   3: L-construct.136:150{[0]: ValueNode<FuncGraph> L-ms_len.149, [1]: Φx_shape}
#   4: L-construct.136:151{[0]: ValueNode<DoSignaturePrimitive> S-Prim-not_equal, [1]: 150, [2]: ValueNode<Int64Imm> 2}
#   5: L-construct.136:151{[0]: ValueNode<FuncGraph> L-bool_.152, [1]: 151}
#   6: L-construct.136:154{[0]: ValueNode<Primitive> Switch, [1]: 151, [2]: ValueNode<FuncGraph> L-✓construct.153, [3]: ValueNode<FuncGraph> L-✗construct.137}
#   7: L-construct.136:155{[0]: 154}
#   8: L-construct.136:[CNode]157{[0]: ValueNode<Primitive> Return, [1]: 156}


# [No.5] L-✗construct.137
# In file /usr/local/lib/python3.7/dist-packages/mindspore/nn/layer/basic.py(315)/        if len(x_shape) != 2:/
funcgraph fg_137[fg_136](
) {

#------------------------> 4
    %1 = FuncGraph::fg_138(%para10)    #(Tensor(F64)[1, 4])    # fg_138=L-↓construct.138 #scope: Default/fc3-Dense
      # In file /usr/local/lib/python3.7/dist-packages/mindspore/nn/layer/basic.py(315)/        if len(x_shape) != 2:/#158
    Primitive::Return{prim_type=1}(%1)    #(Undefined) #scope: Default/fc3-Dense
      # In file /usr/local/lib/python3.7/dist-packages/mindspore/nn/layer/basic.py(315)/        if len(x_shape) != 2:/#159
}
# order:
#   1: L-✗construct.137:158{[0]: ValueNode<FuncGraph> L-↓construct.138, [1]: x}
#   2: L-✗construct.137:159{[0]: ValueNode<Primitive> Return, [1]: 158}


# [No.6] L-↓construct.138
# In file /usr/local/lib/python3.7/dist-packages/mindspore/nn/layer/basic.py(315)/        if len(x_shape) != 2:/
funcgraph fg_138[fg_136](
        %para13 : Tensor(F64)[1, 4]    # Φx
    ) {
    %1 : Bool = FuncGraph::fg_152(Bool(1))    #(Bool)    # fg_152=L-bool_.152 #scope: Default/fc3-Dense
      # In file /usr/local/lib/python3.7/dist-packages/mindspore/nn/layer/basic.py(318)/        if self.has_bias:/#160
    %2 : Func = Primitive::Switch{prim_type=1}(%1, FuncGraph::fg_139, FuncGraph::fg_161)    #(Bool, Func, Func)    # fg_139=L-✓↓construct.139, fg_161=L-✗↓construct.161 #scope: Default/fc3-Dense
      # In file /usr/local/lib/python3.7/dist-packages/mindspore/nn/layer/basic.py(318)/        if self.has_bias:/#162

#------------------------> 5
    %3 = %2() #scope: Default/fc3-Dense
      # In file /usr/local/lib/python3.7/dist-packages/mindspore/nn/layer/basic.py(318)/        if self.has_bias:/#163
    Primitive::Return{prim_type=1}(%3)    #(Undefined) #scope: Default/fc3-Dense
      # In file /usr/local/lib/python3.7/dist-packages/mindspore/nn/layer/basic.py(318)/        if self.has_bias:/#164
}
# order:
#   1: L-↓construct.138:x{[0]: ValueNode<DoSignaturePrimitive> S-Prim-MatMul, [1]: Φx, [2]: L-fc3.weight}
#   2: L-↓construct.138:160{[0]: ValueNode<FuncGraph> L-bool_.152, [1]: ValueNode<BoolImm> true}
#   3: L-↓construct.138:162{[0]: ValueNode<Primitive> Switch, [1]: 160, [2]: ValueNode<FuncGraph> L-✓↓construct.139, [3]: ValueNode<FuncGraph> L-✗↓construct.161}
#   4: L-↓construct.138:163{[0]: 162}
#   5: L-↓construct.138:164{[0]: ValueNode<Primitive> Return, [1]: 163}


# [No.7] L-✓↓construct.139
# In file /usr/local/lib/python3.7/dist-packages/mindspore/nn/layer/basic.py(318)/        if self.has_bias:/
funcgraph fg_139[fg_138](
) {

#------------------------> 6
    %1 = $(L-✓↓construct.139):DoSignaturePrimitive::S-Prim-MatMul{prim_type=1}[transpose_x1=Bool(0), transpose_b=Bool(1), transpose_a=Bool(0), output_names=["output"], transpose_x2=Bool(1), input_names=["x1", "x2"]](%para13, %para12)    #(Tensor(F64)[1, 4], Ref[Tensor(F32)][32, 4]) #scope: Default/fc3-Dense
      # In file /usr/local/lib/python3.7/dist-packages/mindspore/nn/layer/basic.py(317)/        x = self.matmul(x, self.weight)/#x
    %2 = DoSignaturePrimitive::S-Prim-BiasAdd{prim_type=1}[input_names=["x", "b"], output_names=["output"], format="NCHW"](%1, %para11)    #(Undefined, Ref[Tensor(F32)][32]) #scope: Default/fc3-Dense
      # In file /usr/local/lib/python3.7/dist-packages/mindspore/nn/layer/basic.py(319)/            x = self.bias_add(x, self.bias)/#x
    %3 = FuncGraph::fg_165(%2)    #(Undefined)    # fg_165=L-↓↓construct.165 #scope: Default/fc3-Dense
      # In file /usr/local/lib/python3.7/dist-packages/mindspore/nn/layer/basic.py(318)/        if self.has_bias:/#166
    Primitive::Return{prim_type=1}(%3)    #(Undefined) #scope: Default/fc3-Dense
      # In file /usr/local/lib/python3.7/dist-packages/mindspore/nn/layer/basic.py(318)/        if self.has_bias:/#167
}
# order:
#   1: L-✓↓construct.139:x{[0]: ValueNode<DoSignaturePrimitive> S-Prim-BiasAdd, [1]: x, [2]: L-fc3.bias}
#   2: L-✓↓construct.139:166{[0]: ValueNode<FuncGraph> L-↓↓construct.165, [1]: x}
#   3: L-✓↓construct.139:167{[0]: ValueNode<Primitive> Return, [1]: 166}


#===============================================================================
# num of function graphs in stack: 8
