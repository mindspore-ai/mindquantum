# [No.1] construct_wrapper.217
# In file /tmp/ipykernel_342/584492420.py(93)/
funcgraph fg_217(
        %para1 : Tensor(F64)[1, 4]    # x
        , %para2 : Ref[Tensor(F32)][4]    # fc3.bias
        , %para3 : Ref[Tensor(F32)][4, 32]    # fc3.weight
        , %para4 : Ref[Tensor(F32)][32]    # fc2.bias
        , %para5 : Ref[Tensor(F32)][32, 32]    # fc2.weight
        , %para6 : Ref[Tensor(F32)][32]    # fc1.bias
        , %para7 : Ref[Tensor(F32)][32, 4]    # fc1.weight
    ) {

#------------------------> 0
    %1 = FuncGraph::fg_218(%para1)    #(Tensor(F64)[1, 4])    # fg_218=construct.218 #scope: Default
      # In file /tmp/ipykernel_342/584492420.py(97)/#[CNode]224
    Primitive::Return{prim_type=1}(%1)    #(Undefined) #scope: Default
      # In file /tmp/ipykernel_342/584492420.py(97)/#[CNode]225
}
# order:
#   1: construct_wrapper.217:[CNode]224{[0]: ValueNode<FuncGraph> construct.218, [1]: x}
#   2: construct_wrapper.217:[CNode]225{[0]: ValueNode<Primitive> Return, [1]: [CNode]224}


# [No.2] construct.218
# In file /tmp/ipykernel_342/584492420.py(93)/
funcgraph fg_218[fg_217](
        %para8 : Tensor(F64)[1, 4]    # x
    ) {

#------------------------> 1
    %1 = FuncGraph::fg_219(%para8)    #(Tensor(F64)[1, 4])    # fg_219=construct.219 #scope: Default
      # In file /tmp/ipykernel_342/584492420.py(94)/#x
    %2 = FuncGraph::fg_226(%1)    #(Undefined)    # fg_226=construct.226 #scope: Default
      # In file /tmp/ipykernel_342/584492420.py(95)/#x
    %3 = FuncGraph::fg_227(%2)    #(Undefined)    # fg_227=construct.227 #scope: Default
      # In file /tmp/ipykernel_342/584492420.py(96)/#q_values
    Primitive::Return{prim_type=1}(%3)    #(Undefined) #scope: Default
      # In file /tmp/ipykernel_342/584492420.py(97)/#[CNode]228
}
# order:
#   1: construct.218:x{[0]: ValueNode<FuncGraph> construct.219, [1]: x}
#   2: construct.218:x{[0]: ValueNode<FuncGraph> construct.226, [1]: x}
#   3: construct.218:q_values{[0]: ValueNode<FuncGraph> construct.227, [1]: x}
#   4: construct.218:[CNode]228{[0]: ValueNode<Primitive> Return, [1]: q_values}


# [No.3] construct.219
# In file /usr/local/lib/python3.7/dist-packages/mindspore/nn/layer/basic.py(312)/    def construct(self, x):/
funcgraph fg_219[fg_217](
        %para9 : Tensor(F64)[1, 4]    # x
    ) {

#------------------------> 2
    %1 = FuncGraph::fg_220(%para9, %para6, %para7)    #(Tensor(F64)[1, 4], Ref[Tensor(F32)][32], Ref[Tensor(F32)][32, 4])    # fg_220=L-construct.220 #scope: Default
      # #[CNode]229
    Primitive::Return{prim_type=1}(%1)    #(Undefined) #scope: Default/fc1-Dense
      # In file /usr/local/lib/python3.7/dist-packages/mindspore/nn/layer/basic.py(312)/    def construct(self, x):/#[CNode]230
}
# order:
#   1: construct.219:[CNode]229{[0]: ValueNode<FuncGraph> L-construct.220, [1]: x, [2]: fc1.bias, [3]: fc1.weight}
#   2: construct.219:[CNode]230{[0]: ValueNode<Primitive> Return, [1]: [CNode]229}


# [No.4] L-construct.220
# In file /usr/local/lib/python3.7/dist-packages/mindspore/nn/layer/basic.py(312)/    def construct(self, x):/
funcgraph fg_220(
        %para10 : Tensor(F64)[1, 4]    # x
        , %para11 : Ref[Tensor(F32)][32]    # L-fc3.bias
        , %para12 : Ref[Tensor(F32)][32, 4]    # L-fc3.weight
    ) {
    %1 : Tuple[I64*2] = DoSignaturePrimitive::S-Prim-Shape{prim_type=1}(%para10)    #(Tensor(F64)[1, 4]) #scope: Default/fc3-Dense
      # In file /usr/local/lib/python3.7/dist-packages/mindspore/nn/layer/basic.py(322)/        if len(x_shape) != 2:/#Φx_shape
    %2 : NoneType = DoSignaturePrimitive::S-Prim-check_dense_input_shape{prim_type=1}(%1)    #(Tuple[I64*2]) #scope: Default/fc3-Dense
      # In file /usr/local/lib/python3.7/dist-packages/mindspore/nn/layer/basic.py(314)/        check_dense_input_shape(x_shape)/#231
    %3 : NoneType = Primitive::stop_gradient{prim_type=1}(%2)    #(NoneType) #scope: Default/fc3-Dense
      # In file /usr/local/lib/python3.7/dist-packages/mindspore/nn/layer/basic.py(312)/    def construct(self, x):/#232
    %4 : I64 = FuncGraph::fg_233(%1)    #(Tuple[I64*2])    # fg_233=L-ms_len.233 #scope: Default/fc3-Dense
      # In file /usr/local/lib/python3.7/dist-packages/mindspore/nn/layer/basic.py(315)/        if len(x_shape) != 2:/#234
    %5 : Bool = DoSignaturePrimitive::S-Prim-not_equal{prim_type=1}(%4, I64(2))    #(I64, I64) #scope: Default/fc3-Dense
      # In file /usr/local/lib/python3.7/dist-packages/mindspore/nn/layer/basic.py(315)/        if len(x_shape) != 2:/#235
    %6 : Bool = FuncGraph::fg_236(%5)    #(Bool)    # fg_236=L-bool_.236 #scope: Default/fc3-Dense
      # In file /usr/local/lib/python3.7/dist-packages/mindspore/nn/layer/basic.py(315)/        if len(x_shape) != 2:/#235
    %7 : Func = Primitive::Switch{prim_type=1}(%6, FuncGraph::fg_237, FuncGraph::fg_221)    #(Bool, Func, Func)    # fg_237=L-✓construct.237, fg_221=L-✗construct.221 #scope: Default/fc3-Dense
      # In file /usr/local/lib/python3.7/dist-packages/mindspore/nn/layer/basic.py(315)/        if len(x_shape) != 2:/#238

#------------------------> 3
    %8 = %7() #scope: Default/fc3-Dense
      # In file /usr/local/lib/python3.7/dist-packages/mindspore/nn/layer/basic.py(315)/        if len(x_shape) != 2:/#239
    %9 = Primitive::Depend{prim_type=1}[side_effect_propagate=I64(1)](%8, %3)    #(Undefined, NoneType) #scope: Default/fc3-Dense
      # In file /usr/local/lib/python3.7/dist-packages/mindspore/nn/layer/basic.py(312)/    def construct(self, x):/#240
    Primitive::Return{prim_type=1}(%9)    #(Undefined) #scope: Default/fc3-Dense
      # In file /usr/local/lib/python3.7/dist-packages/mindspore/nn/layer/basic.py(312)/    def construct(self, x):/#[CNode]241
}
# order:
#   1: L-construct.220:Φx_shape{[0]: ValueNode<DoSignaturePrimitive> S-Prim-Shape, [1]: x}
#   2: L-construct.220:231{[0]: ValueNode<DoSignaturePrimitive> S-Prim-check_dense_input_shape, [1]: Φx_shape}
#   3: L-construct.220:234{[0]: ValueNode<FuncGraph> L-ms_len.233, [1]: Φx_shape}
#   4: L-construct.220:235{[0]: ValueNode<DoSignaturePrimitive> S-Prim-not_equal, [1]: 234, [2]: ValueNode<Int64Imm> 2}
#   5: L-construct.220:235{[0]: ValueNode<FuncGraph> L-bool_.236, [1]: 235}
#   6: L-construct.220:238{[0]: ValueNode<Primitive> Switch, [1]: 235, [2]: ValueNode<FuncGraph> L-✓construct.237, [3]: ValueNode<FuncGraph> L-✗construct.221}
#   7: L-construct.220:239{[0]: 238}
#   8: L-construct.220:[CNode]241{[0]: ValueNode<Primitive> Return, [1]: 240}


# [No.5] L-✗construct.221
# In file /usr/local/lib/python3.7/dist-packages/mindspore/nn/layer/basic.py(315)/        if len(x_shape) != 2:/
funcgraph fg_221[fg_220](
) {

#------------------------> 4
    %1 = FuncGraph::fg_222(%para10)    #(Tensor(F64)[1, 4])    # fg_222=L-↓construct.222 #scope: Default/fc3-Dense
      # In file /usr/local/lib/python3.7/dist-packages/mindspore/nn/layer/basic.py(315)/        if len(x_shape) != 2:/#242
    Primitive::Return{prim_type=1}(%1)    #(Undefined) #scope: Default/fc3-Dense
      # In file /usr/local/lib/python3.7/dist-packages/mindspore/nn/layer/basic.py(315)/        if len(x_shape) != 2:/#243
}
# order:
#   1: L-✗construct.221:242{[0]: ValueNode<FuncGraph> L-↓construct.222, [1]: x}
#   2: L-✗construct.221:243{[0]: ValueNode<Primitive> Return, [1]: 242}


# [No.6] L-↓construct.222
# In file /usr/local/lib/python3.7/dist-packages/mindspore/nn/layer/basic.py(315)/        if len(x_shape) != 2:/
funcgraph fg_222[fg_220](
        %para13 : Tensor(F64)[1, 4]    # Φx
    ) {
    %1 : Bool = FuncGraph::fg_236(Bool(1))    #(Bool)    # fg_236=L-bool_.236 #scope: Default/fc3-Dense
      # In file /usr/local/lib/python3.7/dist-packages/mindspore/nn/layer/basic.py(318)/        if self.has_bias:/#244
    %2 : Func = Primitive::Switch{prim_type=1}(%1, FuncGraph::fg_223, FuncGraph::fg_245)    #(Bool, Func, Func)    # fg_223=L-✓↓construct.223, fg_245=L-✗↓construct.245 #scope: Default/fc3-Dense
      # In file /usr/local/lib/python3.7/dist-packages/mindspore/nn/layer/basic.py(318)/        if self.has_bias:/#246

#------------------------> 5
    %3 = %2() #scope: Default/fc3-Dense
      # In file /usr/local/lib/python3.7/dist-packages/mindspore/nn/layer/basic.py(318)/        if self.has_bias:/#247
    Primitive::Return{prim_type=1}(%3)    #(Undefined) #scope: Default/fc3-Dense
      # In file /usr/local/lib/python3.7/dist-packages/mindspore/nn/layer/basic.py(318)/        if self.has_bias:/#248
}
# order:
#   1: L-↓construct.222:x{[0]: ValueNode<DoSignaturePrimitive> S-Prim-MatMul, [1]: Φx, [2]: L-fc3.weight}
#   2: L-↓construct.222:244{[0]: ValueNode<FuncGraph> L-bool_.236, [1]: ValueNode<BoolImm> true}
#   3: L-↓construct.222:246{[0]: ValueNode<Primitive> Switch, [1]: 244, [2]: ValueNode<FuncGraph> L-✓↓construct.223, [3]: ValueNode<FuncGraph> L-✗↓construct.245}
#   4: L-↓construct.222:247{[0]: 246}
#   5: L-↓construct.222:248{[0]: ValueNode<Primitive> Return, [1]: 247}


# [No.7] L-✓↓construct.223
# In file /usr/local/lib/python3.7/dist-packages/mindspore/nn/layer/basic.py(318)/        if self.has_bias:/
funcgraph fg_223[fg_222](
) {

#------------------------> 6
    %1 = $(L-✓↓construct.223):DoSignaturePrimitive::S-Prim-MatMul{prim_type=1}[transpose_x1=Bool(0), transpose_b=Bool(1), transpose_a=Bool(0), output_names=["output"], transpose_x2=Bool(1), input_names=["x1", "x2"]](%para13, %para12)    #(Tensor(F64)[1, 4], Ref[Tensor(F32)][32, 4]) #scope: Default/fc3-Dense
      # In file /usr/local/lib/python3.7/dist-packages/mindspore/nn/layer/basic.py(317)/        x = self.matmul(x, self.weight)/#x
    %2 = DoSignaturePrimitive::S-Prim-BiasAdd{prim_type=1}[input_names=["x", "b"], output_names=["output"], format="NCHW"](%1, %para11)    #(Undefined, Ref[Tensor(F32)][32]) #scope: Default/fc3-Dense
      # In file /usr/local/lib/python3.7/dist-packages/mindspore/nn/layer/basic.py(319)/            x = self.bias_add(x, self.bias)/#x
    %3 = FuncGraph::fg_249(%2)    #(Undefined)    # fg_249=L-↓↓construct.249 #scope: Default/fc3-Dense
      # In file /usr/local/lib/python3.7/dist-packages/mindspore/nn/layer/basic.py(318)/        if self.has_bias:/#250
    Primitive::Return{prim_type=1}(%3)    #(Undefined) #scope: Default/fc3-Dense
      # In file /usr/local/lib/python3.7/dist-packages/mindspore/nn/layer/basic.py(318)/        if self.has_bias:/#251
}
# order:
#   1: L-✓↓construct.223:x{[0]: ValueNode<DoSignaturePrimitive> S-Prim-BiasAdd, [1]: x, [2]: L-fc3.bias}
#   2: L-✓↓construct.223:250{[0]: ValueNode<FuncGraph> L-↓↓construct.249, [1]: x}
#   3: L-✓↓construct.223:251{[0]: ValueNode<Primitive> Return, [1]: 250}


#===============================================================================
# num of function graphs in stack: 8
