# [No.1] construct_wrapper.7
# In file /tmp/ipykernel_342/2532391219.py(92)/
funcgraph fg_7(
        %para1 : Tensor(F64)[1, 4]    # x
        , %para2 : Ref[Tensor(F32)][4]    # fc3.bias
        , %para3 : Ref[Tensor(F32)][4, 32]    # fc3.weight
        , %para4 : Ref[Tensor(F32)][32]    # fc2.bias
        , %para5 : Ref[Tensor(F32)][32, 32]    # fc2.weight
        , %para6 : Ref[Tensor(F32)][32]    # fc1.bias
        , %para7 : Ref[Tensor(F32)][32, 4]    # fc1.weight
    ) {

#------------------------> 0
    %1 = FuncGraph::fg_8(%para1)    #(Tensor(F64)[1, 4])    # fg_8=construct.8 #scope: Default
      # In file /tmp/ipykernel_342/2532391219.py(96)/#[CNode]14
    Primitive::Return{prim_type=1}(%1)    #(Undefined) #scope: Default
      # In file /tmp/ipykernel_342/2532391219.py(96)/#[CNode]15
}
# order:
#   1: construct_wrapper.7:[CNode]14{[0]: ValueNode<FuncGraph> construct.8, [1]: x}
#   2: construct_wrapper.7:[CNode]15{[0]: ValueNode<Primitive> Return, [1]: [CNode]14}


# [No.2] construct.8
# In file /tmp/ipykernel_342/2532391219.py(92)/
funcgraph fg_8[fg_7](
        %para8 : Tensor(F64)[1, 4]    # x
    ) {

#------------------------> 1
    %1 = FuncGraph::fg_9(%para8)    #(Tensor(F64)[1, 4])    # fg_9=construct.9 #scope: Default
      # In file /tmp/ipykernel_342/2532391219.py(93)/#x
    %2 = FuncGraph::fg_16(%1)    #(Undefined)    # fg_16=construct.16 #scope: Default
      # In file /tmp/ipykernel_342/2532391219.py(94)/#x
    %3 = FuncGraph::fg_17(%2)    #(Undefined)    # fg_17=construct.17 #scope: Default
      # In file /tmp/ipykernel_342/2532391219.py(95)/#q_values
    Primitive::Return{prim_type=1}(%3)    #(Undefined) #scope: Default
      # In file /tmp/ipykernel_342/2532391219.py(96)/#[CNode]18
}
# order:
#   1: construct.8:x{[0]: ValueNode<FuncGraph> construct.9, [1]: x}
#   2: construct.8:x{[0]: ValueNode<FuncGraph> construct.16, [1]: x}
#   3: construct.8:q_values{[0]: ValueNode<FuncGraph> construct.17, [1]: x}
#   4: construct.8:[CNode]18{[0]: ValueNode<Primitive> Return, [1]: q_values}


# [No.3] construct.9
# In file /usr/local/lib/python3.7/dist-packages/mindspore/nn/layer/basic.py(312)/    def construct(self, x):/
funcgraph fg_9[fg_7](
        %para9 : Tensor(F64)[1, 4]    # x
    ) {

#------------------------> 2
    %1 = FuncGraph::fg_10(%para9, %para6, %para7)    #(Tensor(F64)[1, 4], Ref[Tensor(F32)][32], Ref[Tensor(F32)][32, 4])    # fg_10=L-construct.10 #scope: Default
      # #[CNode]19
    Primitive::Return{prim_type=1}(%1)    #(Undefined) #scope: Default/fc1-Dense
      # In file /usr/local/lib/python3.7/dist-packages/mindspore/nn/layer/basic.py(312)/    def construct(self, x):/#[CNode]20
}
# order:
#   1: construct.9:[CNode]19{[0]: ValueNode<FuncGraph> L-construct.10, [1]: x, [2]: fc1.bias, [3]: fc1.weight}
#   2: construct.9:[CNode]20{[0]: ValueNode<Primitive> Return, [1]: [CNode]19}


# [No.4] L-construct.10
# In file /usr/local/lib/python3.7/dist-packages/mindspore/nn/layer/basic.py(312)/    def construct(self, x):/
funcgraph fg_10(
        %para10 : Tensor(F64)[1, 4]    # x
        , %para11 : Ref[Tensor(F32)][32]    # L-fc3.bias
        , %para12 : Ref[Tensor(F32)][32, 4]    # L-fc3.weight
    ) {
    %1 : Tuple[I64*2] = DoSignaturePrimitive::S-Prim-Shape{prim_type=1}(%para10)    #(Tensor(F64)[1, 4]) #scope: Default/fc3-Dense
      # In file /usr/local/lib/python3.7/dist-packages/mindspore/nn/layer/basic.py(322)/        if len(x_shape) != 2:/#Φx_shape
    %2 : NoneType = DoSignaturePrimitive::S-Prim-check_dense_input_shape{prim_type=1}(%1)    #(Tuple[I64*2]) #scope: Default/fc3-Dense
      # In file /usr/local/lib/python3.7/dist-packages/mindspore/nn/layer/basic.py(314)/        check_dense_input_shape(x_shape)/#21
    %3 : NoneType = Primitive::stop_gradient{prim_type=1}(%2)    #(NoneType) #scope: Default/fc3-Dense
      # In file /usr/local/lib/python3.7/dist-packages/mindspore/nn/layer/basic.py(312)/    def construct(self, x):/#22
    %4 : I64 = FuncGraph::fg_23(%1)    #(Tuple[I64*2])    # fg_23=L-ms_len.23 #scope: Default/fc3-Dense
      # In file /usr/local/lib/python3.7/dist-packages/mindspore/nn/layer/basic.py(315)/        if len(x_shape) != 2:/#24
    %5 : Bool = DoSignaturePrimitive::S-Prim-not_equal{prim_type=1}(%4, I64(2))    #(I64, I64) #scope: Default/fc3-Dense
      # In file /usr/local/lib/python3.7/dist-packages/mindspore/nn/layer/basic.py(315)/        if len(x_shape) != 2:/#25
    %6 : Bool = FuncGraph::fg_26(%5)    #(Bool)    # fg_26=L-bool_.26 #scope: Default/fc3-Dense
      # In file /usr/local/lib/python3.7/dist-packages/mindspore/nn/layer/basic.py(315)/        if len(x_shape) != 2:/#25
    %7 : Func = Primitive::Switch{prim_type=1}(%6, FuncGraph::fg_27, FuncGraph::fg_11)    #(Bool, Func, Func)    # fg_27=L-✓construct.27, fg_11=L-✗construct.11 #scope: Default/fc3-Dense
      # In file /usr/local/lib/python3.7/dist-packages/mindspore/nn/layer/basic.py(315)/        if len(x_shape) != 2:/#28

#------------------------> 3
    %8 = %7() #scope: Default/fc3-Dense
      # In file /usr/local/lib/python3.7/dist-packages/mindspore/nn/layer/basic.py(315)/        if len(x_shape) != 2:/#29
    %9 = Primitive::Depend{prim_type=1}[side_effect_propagate=I64(1)](%8, %3)    #(Undefined, NoneType) #scope: Default/fc3-Dense
      # In file /usr/local/lib/python3.7/dist-packages/mindspore/nn/layer/basic.py(312)/    def construct(self, x):/#30
    Primitive::Return{prim_type=1}(%9)    #(Undefined) #scope: Default/fc3-Dense
      # In file /usr/local/lib/python3.7/dist-packages/mindspore/nn/layer/basic.py(312)/    def construct(self, x):/#[CNode]31
}
# order:
#   1: L-construct.10:Φx_shape{[0]: ValueNode<DoSignaturePrimitive> S-Prim-Shape, [1]: x}
#   2: L-construct.10:21{[0]: ValueNode<DoSignaturePrimitive> S-Prim-check_dense_input_shape, [1]: Φx_shape}
#   3: L-construct.10:24{[0]: ValueNode<FuncGraph> L-ms_len.23, [1]: Φx_shape}
#   4: L-construct.10:25{[0]: ValueNode<DoSignaturePrimitive> S-Prim-not_equal, [1]: 24, [2]: ValueNode<Int64Imm> 2}
#   5: L-construct.10:25{[0]: ValueNode<FuncGraph> L-bool_.26, [1]: 25}
#   6: L-construct.10:28{[0]: ValueNode<Primitive> Switch, [1]: 25, [2]: ValueNode<FuncGraph> L-✓construct.27, [3]: ValueNode<FuncGraph> L-✗construct.11}
#   7: L-construct.10:29{[0]: 28}
#   8: L-construct.10:[CNode]31{[0]: ValueNode<Primitive> Return, [1]: 30}


# [No.5] L-✗construct.11
# In file /usr/local/lib/python3.7/dist-packages/mindspore/nn/layer/basic.py(315)/        if len(x_shape) != 2:/
funcgraph fg_11[fg_10](
) {

#------------------------> 4
    %1 = FuncGraph::fg_12(%para10)    #(Tensor(F64)[1, 4])    # fg_12=L-↓construct.12 #scope: Default/fc3-Dense
      # In file /usr/local/lib/python3.7/dist-packages/mindspore/nn/layer/basic.py(315)/        if len(x_shape) != 2:/#32
    Primitive::Return{prim_type=1}(%1)    #(Undefined) #scope: Default/fc3-Dense
      # In file /usr/local/lib/python3.7/dist-packages/mindspore/nn/layer/basic.py(315)/        if len(x_shape) != 2:/#33
}
# order:
#   1: L-✗construct.11:32{[0]: ValueNode<FuncGraph> L-↓construct.12, [1]: x}
#   2: L-✗construct.11:33{[0]: ValueNode<Primitive> Return, [1]: 32}


# [No.6] L-↓construct.12
# In file /usr/local/lib/python3.7/dist-packages/mindspore/nn/layer/basic.py(315)/        if len(x_shape) != 2:/
funcgraph fg_12[fg_10](
        %para13 : Tensor(F64)[1, 4]    # Φx
    ) {
    %1 : Bool = FuncGraph::fg_26(Bool(1))    #(Bool)    # fg_26=L-bool_.26 #scope: Default/fc3-Dense
      # In file /usr/local/lib/python3.7/dist-packages/mindspore/nn/layer/basic.py(318)/        if self.has_bias:/#34
    %2 : Func = Primitive::Switch{prim_type=1}(%1, FuncGraph::fg_13, FuncGraph::fg_35)    #(Bool, Func, Func)    # fg_13=L-✓↓construct.13, fg_35=L-✗↓construct.35 #scope: Default/fc3-Dense
      # In file /usr/local/lib/python3.7/dist-packages/mindspore/nn/layer/basic.py(318)/        if self.has_bias:/#36

#------------------------> 5
    %3 = %2() #scope: Default/fc3-Dense
      # In file /usr/local/lib/python3.7/dist-packages/mindspore/nn/layer/basic.py(318)/        if self.has_bias:/#37
    Primitive::Return{prim_type=1}(%3)    #(Undefined) #scope: Default/fc3-Dense
      # In file /usr/local/lib/python3.7/dist-packages/mindspore/nn/layer/basic.py(318)/        if self.has_bias:/#38
}
# order:
#   1: L-↓construct.12:x{[0]: ValueNode<DoSignaturePrimitive> S-Prim-MatMul, [1]: Φx, [2]: L-fc3.weight}
#   2: L-↓construct.12:34{[0]: ValueNode<FuncGraph> L-bool_.26, [1]: ValueNode<BoolImm> true}
#   3: L-↓construct.12:36{[0]: ValueNode<Primitive> Switch, [1]: 34, [2]: ValueNode<FuncGraph> L-✓↓construct.13, [3]: ValueNode<FuncGraph> L-✗↓construct.35}
#   4: L-↓construct.12:37{[0]: 36}
#   5: L-↓construct.12:38{[0]: ValueNode<Primitive> Return, [1]: 37}


# [No.7] L-✓↓construct.13
# In file /usr/local/lib/python3.7/dist-packages/mindspore/nn/layer/basic.py(318)/        if self.has_bias:/
funcgraph fg_13[fg_12](
) {

#------------------------> 6
    %1 = $(L-✓↓construct.13):DoSignaturePrimitive::S-Prim-MatMul{prim_type=1}[transpose_x1=Bool(0), transpose_b=Bool(1), transpose_a=Bool(0), output_names=["output"], transpose_x2=Bool(1), input_names=["x1", "x2"]](%para13, %para12)    #(Tensor(F64)[1, 4], Ref[Tensor(F32)][32, 4]) #scope: Default/fc3-Dense
      # In file /usr/local/lib/python3.7/dist-packages/mindspore/nn/layer/basic.py(317)/        x = self.matmul(x, self.weight)/#x
    %2 = DoSignaturePrimitive::S-Prim-BiasAdd{prim_type=1}[input_names=["x", "b"], output_names=["output"], format="NCHW"](%1, %para11)    #(Undefined, Ref[Tensor(F32)][32]) #scope: Default/fc3-Dense
      # In file /usr/local/lib/python3.7/dist-packages/mindspore/nn/layer/basic.py(319)/            x = self.bias_add(x, self.bias)/#x
    %3 = FuncGraph::fg_39(%2)    #(Undefined)    # fg_39=L-↓↓construct.39 #scope: Default/fc3-Dense
      # In file /usr/local/lib/python3.7/dist-packages/mindspore/nn/layer/basic.py(318)/        if self.has_bias:/#40
    Primitive::Return{prim_type=1}(%3)    #(Undefined) #scope: Default/fc3-Dense
      # In file /usr/local/lib/python3.7/dist-packages/mindspore/nn/layer/basic.py(318)/        if self.has_bias:/#41
}
# order:
#   1: L-✓↓construct.13:x{[0]: ValueNode<DoSignaturePrimitive> S-Prim-BiasAdd, [1]: x, [2]: L-fc3.bias}
#   2: L-✓↓construct.13:40{[0]: ValueNode<FuncGraph> L-↓↓construct.39, [1]: x}
#   3: L-✓↓construct.13:41{[0]: ValueNode<Primitive> Return, [1]: 40}


#===============================================================================
# num of function graphs in stack: 8
